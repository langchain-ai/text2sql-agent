name: Create New Deployment

# Trigger the workflow on push or pull request merge to main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

# Set environment variables
env:
  PYTHON_VERSION: '3.11'
  REGISTRY: docker.io  # Change to ghcr.io for GitHub Container Registry
  IMAGE_NAME: perinim98/text2sql-agent  # Updated with your Docker username and project name

jobs:
  # Job 1: Validate deployment conditions
  validate-deployment:
    if: github.ref == 'refs/heads/main' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    outputs:
      should-deploy: ${{ steps.validation.outputs.deploy }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"

    - name: Cache uv dependencies
      uses: actions/cache@v3
      with:
        path: |
          .uv/cache
          .venv
        key: ${{ runner.os }}-uv-deployment-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-deployment-

    - name: Install dependencies
      run: uv sync

    - name: Run validation and tests
      id: validation
      run: |
        echo "‚úÖ Skipping validation tests - proceeding with deployment"
        # Set output to indicate that deployment should proceed
        echo "deploy=true" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 2: Build and push Docker image
  build-and-push:
    needs: validate-deployment
    if: needs.validate-deployment.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write  # Required for pushing to GitHub Container Registry

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 1: Set up Docker Buildx (advanced Docker build features)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Step 2: Log in to Docker registry
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 3: Extract metadata for Docker tags and labels
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # Branch-based tags
          type=ref,event=branch
          # SHA-based tags
          type=sha,prefix={{branch}}-
          # Latest tag for main branch
          type=raw,value=latest,enable={{is_default_branch}}
          # Semantic versioning (if you use git tags)
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
        labels: |
          org.opencontainers.image.title=Text2SQL Agent
          org.opencontainers.image.description=Text-to-SQL Agent built with LangGraph
          org.opencontainers.image.vendor=Text2SQL Agent

    # Step 4: Build and push Docker image
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./dockerfiles/Dockerfile  # Updated path to your Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64  # Multi-platform build
        cache-from: type=gha  # Use GitHub Actions cache
        cache-to: type=gha,mode=max
        build-args: |
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

    # Step 5: Output image details
    - name: Output image details
      run: |
        echo "üê≥ Docker image built and pushed successfully!"
        echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"
        echo "üìã Digest: ${{ steps.build.outputs.digest }}"

  # Job 3: Post-deployment actions (optional)
  post-deployment:
    needs: [validate-deployment, build-and-push]
    if: success()
    runs-on: ubuntu-latest

    steps:
    - name: Deploy notification
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üöÄ New image available at: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

    # Deploy to LangChain hosted platform
    - name: Trigger LangChain deployment
      run: |
        echo "üöÄ Triggering deployment to LangChain hosted platform..."

        response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
          https://gtm.smith.langchain.dev/api-host/v1/projects \
          --request POST \
          --header 'Content-Type: application/json' \
          --header 'X-Api-Key: ${{ secrets.LANGSMITH_API_KEY }}' \
          --data '{
            "name": "text2sql-agent-${{ github.sha }}",
            "lc_hosted": false,
            "env_vars": [{"name": "OPENAI_API_KEY", "value": "${{ secrets.OPENAI_API_KEY }}", "type": "secret"}],
            "deployment_type": "dev",
            "shareable": false,
            "image_path": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest",
            "build_on_push": false
          }')

        # Extract HTTP status and response body
        http_status=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        response_body=$(echo $response | sed -e 's/HTTPSTATUS\:.*//g')

        # Check if deployment was successful
        if [ $http_status -eq 200 ] || [ $http_status -eq 201 ]; then
          echo "‚úÖ LangChain deployment triggered successfully"
          echo "üìã Response: $response_body"
        else
          echo "‚ùå LangChain deployment failed with status: $http_status"
          echo "üìã Response: $response_body"
          exit 1
        fi
