name: Security and Dependencies

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"

    - name: Cache uv dependencies
      uses: actions/cache@v3
      with:
        path: |
          .uv/cache
          .venv
        key: ${{ runner.os }}-uv-security-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-security-

    - name: Install dependencies
      run: uv sync

    - name: Run security scan with Bandit
      run: |
        uv run pip install bandit
        uv run bandit -r agents/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json
        retention-days: 30

  dependency-update:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"

    - name: Check for outdated dependencies
      run: |
        uv sync
        uv run pip list --outdated --format=json > outdated-deps.json || true

    - name: Upload outdated dependencies report
      uses: actions/upload-artifact@v4
      with:
        name: outdated-dependencies
        path: outdated-deps.json
        retention-days: 7

    - name: Create issue for outdated dependencies
      if: github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let outdatedDeps = [];

          try {
            const data = fs.readFileSync('outdated-deps.json', 'utf8');
            outdatedDeps = JSON.parse(data);
          } catch (error) {
            console.log('No outdated dependencies found or error reading file');
          }

          if (outdatedDeps.length > 0) {
            const depsList = outdatedDeps.map(dep =>
              `- ${dep.name}: ${dep.version} â†’ ${dep.latest_version}`
            ).join('\n');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ğŸ“¦ Dependency Update Available',
              body: `## Outdated Dependencies Found\n\n${depsList}\n\nPlease review and update these dependencies when appropriate.`,
              labels: ['dependencies', 'automated']
            });
          }
